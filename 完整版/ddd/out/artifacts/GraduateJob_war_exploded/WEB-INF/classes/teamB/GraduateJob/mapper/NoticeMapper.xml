<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="teamB.GraduateJob.mapper.NoticeMapper" >
  <resultMap id="BaseResultMap" type="teamB.GraduateJob.po.Notice" >
    <id column="noticeid" property="noticeid" jdbcType="INTEGER" />
    <result column="graduateId" property="graduateid" jdbcType="INTEGER" />
    <result column="Notice_title" property="noticeTitle" jdbcType="CHAR" />
    <result column="Notice_from" property="noticeFrom" jdbcType="CHAR" />
    <result column="Notice_context" property="noticeContext" jdbcType="CHAR" />
    <result column="Notice_time" property="noticeTime" jdbcType="DATE" />
    <result column="companyid" property="companyid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    noticeid, graduateId, Notice_title, Notice_from, Notice_context, Notice_time, companyid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="teamB.GraduateJob.po.NoticeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from notice
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from notice
    where noticeid = #{noticeid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from notice
    where noticeid = #{noticeid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="teamB.GraduateJob.po.NoticeExample" >
    delete from notice
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="teamB.GraduateJob.po.Notice" >
    insert into notice (noticeid, graduateId, Notice_title, 
      Notice_from, Notice_context, Notice_time, 
      companyid)
    values (#{noticeid,jdbcType=INTEGER}, #{graduateid,jdbcType=INTEGER}, #{noticeTitle,jdbcType=CHAR}, 
      #{noticeFrom,jdbcType=CHAR}, #{noticeContext,jdbcType=CHAR}, #{noticeTime,jdbcType=DATE}, 
      #{companyid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="teamB.GraduateJob.po.Notice" >
    insert into notice
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="noticeid != null" >
        noticeid,
      </if>
      <if test="graduateid != null" >
        graduateId,
      </if>
      <if test="noticeTitle != null" >
        Notice_title,
      </if>
      <if test="noticeFrom != null" >
        Notice_from,
      </if>
      <if test="noticeContext != null" >
        Notice_context,
      </if>
      <if test="noticeTime != null" >
        Notice_time,
      </if>
      <if test="companyid != null" >
        companyid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="noticeid != null" >
        #{noticeid,jdbcType=INTEGER},
      </if>
      <if test="graduateid != null" >
        #{graduateid,jdbcType=INTEGER},
      </if>
      <if test="noticeTitle != null" >
        #{noticeTitle,jdbcType=CHAR},
      </if>
      <if test="noticeFrom != null" >
        #{noticeFrom,jdbcType=CHAR},
      </if>
      <if test="noticeContext != null" >
        #{noticeContext,jdbcType=CHAR},
      </if>
      <if test="noticeTime != null" >
        #{noticeTime,jdbcType=DATE},
      </if>
      <if test="companyid != null" >
        #{companyid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="teamB.GraduateJob.po.NoticeExample" resultType="java.lang.Integer" >
    select count(*) from notice
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update notice
    <set >
      <if test="record.noticeid != null" >
        noticeid = #{record.noticeid,jdbcType=INTEGER},
      </if>
      <if test="record.graduateid != null" >
        graduateId = #{record.graduateid,jdbcType=INTEGER},
      </if>
      <if test="record.noticeTitle != null" >
        Notice_title = #{record.noticeTitle,jdbcType=CHAR},
      </if>
      <if test="record.noticeFrom != null" >
        Notice_from = #{record.noticeFrom,jdbcType=CHAR},
      </if>
      <if test="record.noticeContext != null" >
        Notice_context = #{record.noticeContext,jdbcType=CHAR},
      </if>
      <if test="record.noticeTime != null" >
        Notice_time = #{record.noticeTime,jdbcType=DATE},
      </if>
      <if test="record.companyid != null" >
        companyid = #{record.companyid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update notice
    set noticeid = #{record.noticeid,jdbcType=INTEGER},
      graduateId = #{record.graduateid,jdbcType=INTEGER},
      Notice_title = #{record.noticeTitle,jdbcType=CHAR},
      Notice_from = #{record.noticeFrom,jdbcType=CHAR},
      Notice_context = #{record.noticeContext,jdbcType=CHAR},
      Notice_time = #{record.noticeTime,jdbcType=DATE},
      companyid = #{record.companyid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="teamB.GraduateJob.po.Notice" >
    update notice
    <set >
      <if test="graduateid != null" >
        graduateId = #{graduateid,jdbcType=INTEGER},
      </if>
      <if test="noticeTitle != null" >
        Notice_title = #{noticeTitle,jdbcType=CHAR},
      </if>
      <if test="noticeFrom != null" >
        Notice_from = #{noticeFrom,jdbcType=CHAR},
      </if>
      <if test="noticeContext != null" >
        Notice_context = #{noticeContext,jdbcType=CHAR},
      </if>
      <if test="noticeTime != null" >
        Notice_time = #{noticeTime,jdbcType=DATE},
      </if>
      <if test="companyid != null" >
        companyid = #{companyid,jdbcType=INTEGER},
      </if>
    </set>
    where noticeid = #{noticeid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="teamB.GraduateJob.po.Notice" >
    update notice
    set graduateId = #{graduateid,jdbcType=INTEGER},
      Notice_title = #{noticeTitle,jdbcType=CHAR},
      Notice_from = #{noticeFrom,jdbcType=CHAR},
      Notice_context = #{noticeContext,jdbcType=CHAR},
      Notice_time = #{noticeTime,jdbcType=DATE},
      companyid = #{companyid,jdbcType=INTEGER}
    where noticeid = #{noticeid,jdbcType=INTEGER}
  </update>
</mapper>